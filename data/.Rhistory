2, 0))
assign(paste0("cov_theta_modcl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_modcl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_modcl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_modcl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Clarity = "Moderate",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modcl_obs_5_t_", length_strings[i], "$out_sim$emiss_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modcl_obs_5_t_", length_strings[i], "$out_sim$emiss_up"))))))
assign(paste0("cov_theta_uncl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_uncl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, 0))
assign(paste0("cov_theta_uncl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_uncl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_uncl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_uncl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Clarity = "Unclear",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_uncl_obs_5_t_", length_strings[i], "$out_sim$emiss_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_uncl_obs_5_t_", length_strings[i], "$out_sim$emiss_up"))))))
}
## Clear.
cl_obs_5_theta <- rbind(data.frame(cov_theta_cl_obs_5_t_250), data.frame(cov_theta_cl_obs_5_t_500),
data.frame(cov_theta_cl_obs_5_t_1000), data.frame(cov_theta_cl_obs_5_t_2000),
data.frame(cov_theta_cl_obs_5_t_4000), data.frame(cov_theta_cl_obs_5_t_8000))
cl_obs_5_theta <- full_join(cl_obs_5_theta, theta_clear_true, by = "X2")
cl_obs_5_theta <- cl_obs_5_theta %>% mutate(Coverage = ifelse((value > CILow & true < CIHigh),1,0))
colnames(cl_obs_5_theta) <- c("Id", "S_to_obs", "Estimate", "Length", "Clarity","CiLow", "CiHigh","true","Coverage")
cl_obs_5_theta$Length <- factor(cl_obs_5_theta$Length, levels = c("250", "500", "1000", "2000", "4000", "8000"))
cl_obs_5_theta <- aggregate(Coverage ~ Length + S_to_obs + Clarity, cl_obs_5_theta, mean)
## Moderately clear.
modcl_obs_5_theta <- rbind(data.frame(cov_theta_modcl_obs_5_t_250), data.frame(cov_theta_modcl_obs_5_t_500),
data.frame(cov_theta_modcl_obs_5_t_1000), data.frame(cov_theta_modcl_obs_5_t_2000),
data.frame(cov_theta_modcl_obs_5_t_4000), data.frame(cov_theta_modcl_obs_5_t_8000))
modcl_obs_5_theta <- full_join(modcl_obs_5_theta, theta_mod_true, by = "X2")
modcl_obs_5_theta <- modcl_obs_5_theta %>% mutate(Coverage = ifelse((value > CILow & true < CIHigh),1,0))
colnames(modcl_obs_5_theta) <- c("Id", "S_to_obs", "Estimate", "Length", "Clarity","CiLow", "CiHigh","true" ,"Coverage")
modcl_obs_5_theta$Length <- factor(modcl_obs_5_theta$Length, levels = c("250", "500", "1000", "2000", "4000", "8000"))
modcl_obs_5_theta <- aggregate(Coverage ~ Length + S_to_obs + Clarity, modcl_obs_5_theta, mean)
## Unclear.
uncl_obs_5_theta <- rbind(data.frame(cov_theta_uncl_obs_5_t_250), data.frame(cov_theta_uncl_obs_5_t_500),
data.frame(cov_theta_uncl_obs_5_t_1000), data.frame(cov_theta_uncl_obs_5_t_2000),
data.frame(cov_theta_uncl_obs_5_t_4000), data.frame(cov_theta_uncl_obs_5_t_8000))
uncl_obs_5_theta <- full_join(uncl_obs_5_theta, theta_unclear_true, by = "X2")
uncl_obs_5_theta <- uncl_obs_5_theta %>% mutate(Coverage = ifelse((true > CILow & true < CIHigh),1,0))
colnames(uncl_obs_5_theta) <- c("Id", "S_to_obs", "Estimate", "Length", "Clarity","CiLow", "CiHigh","true","Coverage")
uncl_obs_5_theta$Length <- factor(uncl_obs_5_theta$Length, levels = c("250", "500", "1000", "2000", "4000", "8000"))
uncl_obs_5_theta <- aggregate(Coverage ~ Length + S_to_obs + Clarity, uncl_obs_5_theta, mean)
## Plot of bias emission probabilities by clarity and sequence length.
obs_5_theta <- rbind(data.frame(cl_obs_5_theta), data.frame(modcl_obs_5_theta),
data.frame(uncl_obs_5_theta))
obs_5_theta$S_to_obs <- mapvalues(obs_5_theta$S_to_obs,
from = c("M_S1_cat1", "M_S1_cat2", "M_S1_cat3", "M_S1_cat4", "M_S1_cat5",
"M_S2_cat1", "M_S2_cat2", "M_S2_cat3", "M_S2_cat4", "M_S2_cat5",
"M_S3_cat1", "M_S3_cat2", "M_S3_cat3", "M_S3_cat4", "M_S3_cat5"),
to = c(rep(paste0("theta[", 1, "][", 1:5, "]"), each = 1),
rep(paste0("theta[", 2, "][", 1:5, "]"), each = 1),
rep(paste0("theta[", 3, "][", 1:5, "]"), each = 1)))
obs_5_theta$Clarity <- factor(obs_5_theta$Clarity, levels = c("Clear", "Moderate", "Unclear"))
ggplot(obs_5_theta, aes(x = Length, y = Coverage, color = Clarity, group = Clarity)) +
facet_wrap(facets = vars(S_to_obs), nrow = 3, ncol = 5, labeller = label_parsed) +
geom_point() +
geom_line() +
xlab("Sequence length") +
ylab("Bias") +
geom_hline(yintercept = 0) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ylim(0.5, 1)
sd_cl_obs_5_gamma <- rbind(data.frame(sd_gamma_cl_obs_5_t_250), data.frame(sd_gamma_cl_obs_5_t_500),
data.frame(sd_gamma_cl_obs_5_t_1000), data.frame(sd_gamma_cl_obs_5_t_2000),
data.frame(sd_gamma_cl_obs_5_t_4000), data.frame(sd_gamma_cl_obs_5_t_8000))
sd_cl_obs_5_gamma <- rbind(data.frame(sd_gamma_cl_obs_5_t_250), data.frame(sd_gamma_cl_obs_5_t_500),
data.frame(sd_gamma_cl_obs_5_t_1000), data.frame(sd_gamma_cl_obs_5_t_2000),
data.frame(sd_gamma_cl_obs_5_t_4000), data.frame(sd_gamma_cl_obs_5_t_8000))
cl_obs_5_gamma <- rbind(data.frame(cov_gamma_cl_obs_5_t_250), data.frame(cov_gamma_cl_obs_5_t_500),
data.frame(cov_gamma_cl_obs_5_t_1000), data.frame(cov_gamma_cl_obs_5_t_2000),
data.frame(cov_gamma_cl_obs_5_t_4000), data.frame(cov_gamma_cl_obs_5_t_8000))
cl_obs_5_gamma <- full_join(cl_obs_5_gamma, gamma_true, by = "X2")
cl_obs_5_gamma
cl_obs_5_gamma <- cl_obs_5_gamma %>% mutate(Coverage = ifelse((true > CILow & true < CIHigh),1,0))
cl_obs_5_gamma
colnames(cl_obs_5_gamma) <- c("Id", "S_to_s", "Estimate", "Length", "Clarity","CiLow", "CiHigh","true","Coverage")
cl_obs_5_gamma$Length <- factor(cl_obs_5_gamma$Length, levels = c("250", "500", "1000", "2000", "4000", "8000"))
cl_obs_5_gamma <- aggregate(Coverage ~ Length + S_to_s + Clarity, cl_obs_5_gamma, mean)
cl_obs_5_gamma
### Gamma.
## True transition probabilities.
gamma_true <- c(0.80, 0.10, 0.10,
0.10, 0.80, 0.10,
0.10, 0.10, 0.80)
gamma_true = data_frame(gamma_true) %>% mutate(c("M_S1_to_S1", "M_S1_to_S2", "M_S1_to_S3",
"M_S2_to_S1", "M_S2_to_S2", "M_S2_to_S3",
"M_S3_to_S1", "M_S3_to_S2", "M_S3_to_S3"))
colnames(gamma_true) <- c("true", "X2")
for (i in 1: length(length_strings)){
assign(paste0("cov_gamma_cl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_cl_obs_5_t_", length_strings[i], "$out_sim$gamma_mean"))),
2, gamma_true))
assign(paste0("cov_gamma_cl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_gamma_cl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_gamma_cl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_gamma_cl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Clarity = "Clear",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_cl_obs_5_t_", length_strings[i], "$out_sim$gamma_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_cl_obs_5_t_", length_strings[i], "$out_sim$gamma_up"))))))
assign(paste0("cov_gamma_modcl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_modcl_obs_5_t_", length_strings[i], "$out_sim$gamma_mean"))),
2, gamma_true))
assign(paste0("cov_gamma_modcl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_gamma_modcl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_gamma_modcl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_gamma_modcl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Clarity = "Moderate",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modcl_obs_5_t_", length_strings[i], "$out_sim$gamma_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modcl_obs_5_t_", length_strings[i], "$out_sim$gamma_up"))))))
assign(paste0("cov_gamma_uncl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_uncl_obs_5_t_", length_strings[i], "$out_sim$gamma_mean"))),
2, gamma_true))
assign(paste0("cov_gamma_uncl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_gamma_uncl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_gamma_uncl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_gamma_uncl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Clarity = "Unclear",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_cl_obs_5_t_", length_strings[i], "$out_sim$gamma_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_cl_obs_5_t_", length_strings[i], "$out_sim$gamma_up"))))))
}
# Clear.
cl_obs_5_gamma <- rbind(data.frame(cov_gamma_cl_obs_5_t_250), data.frame(cov_gamma_cl_obs_5_t_500),
data.frame(cov_gamma_cl_obs_5_t_1000), data.frame(cov_gamma_cl_obs_5_t_2000),
data.frame(cov_gamma_cl_obs_5_t_4000), data.frame(cov_gamma_cl_obs_5_t_8000))
cl_obs_5_gamma <- full_join(cl_obs_5_gamma, gamma_true, by = "X2")
cl_obs_5_gamma <- cl_obs_5_gamma %>% mutate(Coverage = ifelse((true > CILow & true < CIHigh),1,0))
colnames(cl_obs_5_gamma) <- c("Id", "S_to_s", "Estimate", "Length", "Clarity","CiLow", "CiHigh","true","Coverage")
cl_obs_5_gamma$Length <- factor(cl_obs_5_gamma$Length, levels = c("250", "500", "1000", "2000", "4000", "8000"))
cl_obs_5_gamma <- aggregate(Coverage ~ Length + S_to_s + Clarity, cl_obs_5_gamma, mean)
# Moderately clear.
modcl_obs_5_gamma <- rbind(data.frame(cov_gamma_modcl_obs_5_t_250), data.frame(cov_gamma_modcl_obs_5_t_500),
data.frame(cov_gamma_modcl_obs_5_t_1000), data.frame(cov_gamma_modcl_obs_5_t_2000),
data.frame(cov_gamma_modcl_obs_5_t_4000), data.frame(cov_gamma_modcl_obs_5_t_8000))
modcl_obs_5_gamma <- full_join(modcl_obs_5_gamma, gamma_true, by = "X2")
modcl_obs_5_gamma <- modcl_obs_5_gamma %>% mutate(Coverage = ifelse((true > CILow & true < CIHigh),1,0))
colnames(modcl_obs_5_gamma) <- c("Id", "S_to_s", "Estimate", "Length", "Clarity","CiLow", "CiHigh","true","Coverage")
modcl_obs_5_gamma$Length <- factor(modcl_obs_5_gamma$Length, levels = c("250", "500", "1000", "2000", "4000", "8000"))
modcl_obs_5_gamma <- aggregate(Coverage ~ Length + S_to_s + Clarity, modcl_obs_5_gamma, mean)
# Unclear.
uncl_obs_5_gamma <- rbind(data.frame(cov_gamma_uncl_obs_5_t_250), data.frame(cov_gamma_uncl_obs_5_t_500),
data.frame(cov_gamma_uncl_obs_5_t_1000), data.frame(cov_gamma_uncl_obs_5_t_2000),
data.frame(cov_gamma_uncl_obs_5_t_4000), data.frame(cov_gamma_uncl_obs_5_t_8000))
uncl_obs_5_gamma <- full_join(uncl_obs_5_gamma, gamma_true, by = "X2")
uncl_obs_5_gamma <- uncl_obs_5_gamma %>% mutate(Coverage = ifelse((true > CILow & true < CIHigh),1,0))
colnames(uncl_obs_5_gamma) <- c("Id", "S_to_s", "Estimate", "Length", "Clarity","CiLow", "CiHigh","true","Coverage")
uncl_obs_5_gamma$Length <- factor(uncl_obs_5_gamma$Length, levels = c("250", "500", "1000", "2000", "4000", "8000"))
uncl_obs_5_gamma <- aggregate(Coverage ~ Length + S_to_s + Clarity, uncl_obs_5_gamma, mean)
# Plot of bias transition probabilities by clarity and sequence length.
obs_5_gamma <- rbind(data.frame(cl_obs_5_gamma), data.frame(modcl_obs_5_gamma),
data.frame(uncl_obs_5_gamma))
obs_5_gamma$S_to_s <- mapvalues(obs_5_gamma$S_to_s,
from = c("M_S1_to_S1", "M_S1_to_S2", "M_S1_to_S3",
"M_S2_to_S1", "M_S2_to_S2", "M_S2_to_S3",
"M_S3_to_S1", "M_S3_to_S2", "M_S3_to_S3"),
to = c(rep(paste0("gamma[", 1, "][", 1:3, "]"), each = 1),
rep(paste0("gamma[", 2, "][", 1:3, "]"), each = 1),
rep(paste0("gamma[", 3, "][", 1:3, "]"), each = 1)))
obs_5_gamma$Clarity <- factor(obs_5_gamma$Clarity, levels = c("Clear", "Moderate", "Unclear"))
ggplot(obs_5_gamma, aes(x = Length, y = Abs_bias, color = Clarity, group = Clarity)) +
facet_wrap(facets = vars(S_to_s), nrow = 3, ncol = 3, labeller = label_parsed) +
geom_point() + geom_line() +
ggtitle("") +
xlab("Sequence length") +
ylab("Bias") +
geom_hline(yintercept = 0) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ylim(0.50, 1)
ggplot(obs_5_gamma, aes(x = Length, y = Coverage, color = Clarity, group = Clarity)) +
facet_wrap(facets = vars(S_to_s), nrow = 3, ncol = 3, labeller = label_parsed) +
geom_point() + geom_line() +
ggtitle("") +
xlab("Sequence length") +
ylab("Bias") +
geom_hline(yintercept = 0) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ylim(0.50, 1)
cl_obs_5_gamma
modcl_obs_5_gamma
cl_obs_5_gamma
uncl_obs_5_gamma
obs_5_gamma <- rbind(data.frame(cl_obs_5_gamma), data.frame(modcl_obs_5_gamma),
data.frame(uncl_obs_5_gamma))
obs_5_gamma
obs_5_gamma <- rbind(data.frame(cl_obs_5_gamma), data.frame(modcl_obs_5_gamma),
data.frame(uncl_obs_5_gamma))
obs_5_gamma$S_to_s <- mapvalues(obs_5_gamma$S_to_s,
from = c("M_S1_to_S1", "M_S1_to_S2", "M_S1_to_S3",
"M_S2_to_S1", "M_S2_to_S2", "M_S2_to_S3",
"M_S3_to_S1", "M_S3_to_S2", "M_S3_to_S3"),
to = c(rep(paste0("gamma[", 1, "][", 1:3, "]"), each = 1),
rep(paste0("gamma[", 2, "][", 1:3, "]"), each = 1),
rep(paste0("gamma[", 3, "][", 1:3, "]"), each = 1)))
obs_5_gamma$Clarity <- factor(obs_5_gamma$Clarity, levels = c("Clear", "Moderate", "Unclear"))
View(obs_5_gamma)
View(obs_5_gamma)
ggplot(obs_5_gamma, aes(x = Length, y = Coverage, color = Clarity, group = Clarity)) +
facet_wrap(facets = vars(S_to_s), nrow = 3, ncol = 3, labeller = label_parsed) +
geom_point() + geom_line() +
ggtitle("") +
xlab("Sequence length") +
ylab("Bias") +
geom_hline(yintercept = 0) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ylim(0.50, 1)
# Plot of bias transition probabilities by clarity and sequence length.
obs_5_gamma <- rbind(data.frame(cl_obs_5_gamma), data.frame(modcl_obs_5_gamma),
data.frame(uncl_obs_5_gamma))
obs_5_gamma$S_to_s <- mapvalues(obs_5_gamma$S_to_s,
from = c("M_S1_to_S1", "M_S1_to_S2", "M_S1_to_S3",
"M_S2_to_S1", "M_S2_to_S2", "M_S2_to_S3",
"M_S3_to_S1", "M_S3_to_S2", "M_S3_to_S3"),
to = c(rep(paste0("gamma[", 1, "][", 1:3, "]"), each = 1),
rep(paste0("gamma[", 2, "][", 1:3, "]"), each = 1),
rep(paste0("gamma[", 3, "][", 1:3, "]"), each = 1)))
obs_5_gamma$Clarity <- factor(obs_5_gamma$Clarity, levels = c("Clear", "Moderate", "Unclear"))
ggplot(obs_5_gamma, aes(x = Length, y = Coverage, color = Clarity, group = Clarity)) +
facet_wrap(facets = vars(S_to_s), nrow = 3, ncol = 3, labeller = label_parsed) +
geom_point() + geom_line() +
ggtitle("") +
xlab("Sequence length") +
ylab("Bias") +
geom_hline(yintercept = 0) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +
ylim(0, 1)
# No overlap.
no_overlap_true <- c(0.84, 0.04, 0.04, 0.04, 0.04,
0.04, 0.44, 0.44, 0.04, 0.04,
0.04, 0.04, 0.04, 0.44, 0.44)
no_overlap_true = data_frame(no_overlap_true) %>% mutate(c("M_S1_cat1", "M_S1_cat2",  "M_S1_cat3", "M_S1_cat4", "M_S1_cat5",
"M_S2_cat1", "M_S2_cat2",  "M_S2_cat3", "M_S2_cat4", "M_S2_cat5",
"M_S3_cat1", "M_S3_cat2",  "M_S3_cat3", "M_S3_cat4", "M_S3_cat5"))
colnames(no_overlap_true) <- c("true", "X2")
# Moderate overlap.
mod_overlap_true <- c(0.59, 0.29, 0.04, 0.04, 0.04,
0.04, 0.29, 0.59, 0.04, 0.04,
0.04, 0.04, 0.20, 0.36, 0.36)
mod_overlap_true = data_frame(mod_overlap_true) %>% mutate(c("M_S1_cat1", "M_S1_cat2",  "M_S1_cat3", "M_S1_cat4", "M_S1_cat5",
"M_S2_cat1", "M_S2_cat2",  "M_S2_cat3", "M_S2_cat4", "M_S2_cat5",
"M_S3_cat1", "M_S3_cat2",  "M_S3_cat3", "M_S3_cat4", "M_S3_cat5"))
colnames(mod_overlap_true) <- c("true", "X2")
# Much overlap.
much_overlap_true <- c(0.44, 0.44, 0.04, 0.04, 0.04,
0.04, 0.44, 0.44, 0.04, 0.04,
0.04, 0.04, 0.30, 0.31, 0.31)
much_overlap_true = data_frame(much_overlap_true) %>% mutate(c("M_S1_cat1", "M_S1_cat2",  "M_S1_cat3", "M_S1_cat4", "M_S1_cat5",
"M_S2_cat1", "M_S2_cat2",  "M_S2_cat3", "M_S2_cat4", "M_S2_cat5",
"M_S3_cat1", "M_S3_cat2",  "M_S3_cat3", "M_S3_cat4", "M_S3_cat5"))
colnames(much_overlap_true) <- c("true", "X2")
for (i in 1: length(length_strings)){
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, no_overlap_true))
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_nooverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "None",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$gamma_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$gamma_up"))))))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, mod_overlap_true))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_modoverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "Moderate",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$gamma_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$gamma_up"))))))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_muchoverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, much_overlap_true))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "Much",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_muchoverl_obs_5_t_", length_strings[i], "$out_sim$gamma_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_muchoverl_obs_5_t_", length_strings[i], "$out_sim$gamma_up"))))))
}
# No overlap.
no_overlap_true <- c(0.84, 0.04, 0.04, 0.04, 0.04,
0.04, 0.44, 0.44, 0.04, 0.04,
0.04, 0.04, 0.04, 0.44, 0.44)
no_overlap_true = data_frame(no_overlap_true) %>% mutate(c("M_S1_cat1", "M_S1_cat2",  "M_S1_cat3", "M_S1_cat4", "M_S1_cat5",
"M_S2_cat1", "M_S2_cat2",  "M_S2_cat3", "M_S2_cat4", "M_S2_cat5",
"M_S3_cat1", "M_S3_cat2",  "M_S3_cat3", "M_S3_cat4", "M_S3_cat5"))
colnames(no_overlap_true) <- c("true", "X2")
# Moderate overlap.
mod_overlap_true <- c(0.59, 0.29, 0.04, 0.04, 0.04,
0.04, 0.29, 0.59, 0.04, 0.04,
0.04, 0.04, 0.20, 0.36, 0.36)
mod_overlap_true = data_frame(mod_overlap_true) %>% mutate(c("M_S1_cat1", "M_S1_cat2",  "M_S1_cat3", "M_S1_cat4", "M_S1_cat5",
"M_S2_cat1", "M_S2_cat2",  "M_S2_cat3", "M_S2_cat4", "M_S2_cat5",
"M_S3_cat1", "M_S3_cat2",  "M_S3_cat3", "M_S3_cat4", "M_S3_cat5"))
colnames(mod_overlap_true) <- c("true", "X2")
# Much overlap.
much_overlap_true <- c(0.44, 0.44, 0.04, 0.04, 0.04,
0.04, 0.44, 0.44, 0.04, 0.04,
0.04, 0.04, 0.30, 0.31, 0.31)
much_overlap_true = data_frame(much_overlap_true) %>% mutate(c("M_S1_cat1", "M_S1_cat2",  "M_S1_cat3", "M_S1_cat4", "M_S1_cat5",
"M_S2_cat1", "M_S2_cat2",  "M_S2_cat3", "M_S2_cat4", "M_S2_cat5",
"M_S3_cat1", "M_S3_cat2",  "M_S3_cat3", "M_S3_cat4", "M_S3_cat5"))
colnames(much_overlap_true) <- c("true", "X2")
for (i in 1: length(length_strings)){
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, no_overlap_true))
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_nooverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "None",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$gamma_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$gamma_up"))))))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, mod_overlap_true))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_modoverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "Moderate",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$gamma_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$gamma_up"))))))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_muchoverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, much_overlap_true))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "Much",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_muchoverl_obs_5_t_", length_strings[i], "$out_sim$gamma_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_muchoverl_obs_5_t_", length_strings[i], "$out_sim$gamma_up"))))))
}
#########################
### Overlap condition ###
#########################
### Theta.
## True emission probabilities.
# No overlap.
no_overlap_true <- c(0.84, 0.04, 0.04, 0.04, 0.04,
0.04, 0.44, 0.44, 0.04, 0.04,
0.04, 0.04, 0.04, 0.44, 0.44)
no_overlap_true = data_frame(no_overlap_true) %>% mutate(c("M_S1_cat1", "M_S1_cat2",  "M_S1_cat3", "M_S1_cat4", "M_S1_cat5",
"M_S2_cat1", "M_S2_cat2",  "M_S2_cat3", "M_S2_cat4", "M_S2_cat5",
"M_S3_cat1", "M_S3_cat2",  "M_S3_cat3", "M_S3_cat4", "M_S3_cat5"))
colnames(no_overlap_true) <- c("true", "X2")
# Moderate overlap.
mod_overlap_true <- c(0.59, 0.29, 0.04, 0.04, 0.04,
0.04, 0.29, 0.59, 0.04, 0.04,
0.04, 0.04, 0.20, 0.36, 0.36)
mod_overlap_true = data_frame(mod_overlap_true) %>% mutate(c("M_S1_cat1", "M_S1_cat2",  "M_S1_cat3", "M_S1_cat4", "M_S1_cat5",
"M_S2_cat1", "M_S2_cat2",  "M_S2_cat3", "M_S2_cat4", "M_S2_cat5",
"M_S3_cat1", "M_S3_cat2",  "M_S3_cat3", "M_S3_cat4", "M_S3_cat5"))
colnames(mod_overlap_true) <- c("true", "X2")
# Much overlap.
much_overlap_true <- c(0.44, 0.44, 0.04, 0.04, 0.04,
0.04, 0.44, 0.44, 0.04, 0.04,
0.04, 0.04, 0.30, 0.31, 0.31)
much_overlap_true = data_frame(much_overlap_true) %>% mutate(c("M_S1_cat1", "M_S1_cat2",  "M_S1_cat3", "M_S1_cat4", "M_S1_cat5",
"M_S2_cat1", "M_S2_cat2",  "M_S2_cat3", "M_S2_cat4", "M_S2_cat5",
"M_S3_cat1", "M_S3_cat2",  "M_S3_cat3", "M_S3_cat4", "M_S3_cat5"))
colnames(much_overlap_true) <- c("true", "X2")
###################
### Load packages and data ###
##############################
### Load packages.
if(!require(data.table)) install.packages("data.table")
if(!require(reshape)) install.packages("reshape")
if(!require(ggplot2)) install.packages("ggplot2")
if(!require(ggh4x)) install.packages("ggh4x")
if(!require(plyr)) install.packages("plyr")
if(!require(plyr)) install.packages("tidyverse")
library(data.table)
library(reshape)
library(ggplot2)
library(ggh4x)
library(plyr)
library(tidyverse)
### Set working directory.
setwd("~/Documents/GitHub/paper-hmm-simulation-study/data")
### Function for assigning datasets to list.
rda2list <- function(file) {
e <- new.env()
load(file, envir = e)
as.list(e)
}
### Loading in and assigning datasets to list.
files <- list.files(pattern = ".rda$")
results <- Map(rda2list, file.path(files))
names(results) <- tools::file_path_sans_ext(files)
##########################################################
### Theta / Gamma ; Clear / Moderately Clear / Unclear ###
##########################################################
length_strings <- c("250", "500", "1000", "2000", "4000", "8000")
### Theta.
for (i in 1: length(length_strings)){
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, no_overlap_true))
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_nooverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "None",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$gamma_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$gamma_up"))))))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, mod_overlap_true))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_modoverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "Moderate",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$gamma_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$gamma_up"))))))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_muchoverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, much_overlap_true))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "Much",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_muchoverl_obs_5_t_", length_strings[i], "$out_sim$gamma_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_muchoverl_obs_5_t_", length_strings[i], "$out_sim$gamma_up"))))))
}
for (i in 1: length(length_strings)){
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, no_overlap_true))
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_nooverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "None",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_up"))))))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, mod_overlap_true))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_modoverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "Moderate",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_up"))))))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_muchoverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, much_overlap_true))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "Much",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_muchoverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_up"))))))
}
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, no_overlap_true))
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_nooverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "None",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_up"))))))
length_strings
for (i in 1: length(length_strings)){
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, no_overlap_true))
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_nooverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_nooverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "None",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_nooverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_up"))))))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, mod_overlap_true))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_modoverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_modoverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "Moderate",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_up"))))))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
sweep(eval(parse(text = paste0("results$sim_HMM_theta_muchoverl_obs_5_t_", length_strings[i], "$out_sim$emiss_mean"))),
2, much_overlap_true))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
melt(eval(parse(text = paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i])))))
assign(paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]),
cbind(eval(parse(text = paste0("cov_theta_muchoverl_obs_5_t_", length_strings[i]))),
Length = length_strings[i], Overlap = "Much",
CILow = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_muchoverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_low")))),
CIHigh = as.vector(eval(parse(text = paste0("results$sim_HMM_theta_modoverl_obs_5_t_", length_strings[i], "$out_sim$emmiss_up"))))))
}
debugSource("~/Documents/GitHub/paper-hmm-simulation-study/2.results/hmm_results_cov.R")
debugSource("~/Documents/GitHub/paper-hmm-simulation-study/2.results/hmm_results_cov.R")
debugSource("~/Documents/GitHub/paper-hmm-simulation-study/2.results/hmm_results_cov.R")
